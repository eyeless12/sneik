class GameManager {
    field Snake _snake;
    field Drawer _drawer;
    field Food _food;
    field int _squareSize;
    field int _time;
    field int _delayTime;

    constructor GameManager new(Snake snake){
        let _snake = snake;
        let _squareSize = _snake.getSquareSize();
        let _food = Food.new(Settings.maxScreenX() / 2, Settings.maxScreenY() / 2, _squareSize);
        let _drawer = Drawer.new(16);

        let _time = 0;
        let _delayTime = 1000 / (_snake.getMoveSpeed() * 5);

        return this;
    }

    method void dispose() {

        do _snake.dispose();
        do _food.dispose();
        do _drawer.dispose();

        do Memory.deAlloc(this);

        return;
    }

    method void run(boolean welcome){
        var boolean exit;
        var int key;
        
        let exit = false;
        let key = 0;

        if (welcome){
            do _drawer.welcome();
        }

        do Screen.clearScreen();

        do _snake.draw();
        do _food.draw();
        

        while(~exit){
            let key = Keyboard.keyPressed();

            do _food.draw();
            
            if (~(key = 0)){
                if (_snake.canMove(key) = 1){
                    do _snake.move(key);
                }
                if (_snake.canMove(key) = 0){
                    do _snake.move(_snake.getHeadDirection());
                }
                if (_snake.canMove(key) = -1){
                    do clearFood();
                    do _drawer.gameOver();

                    return;
                }
            }
            if (~Settings.isDebug()){
                if (key = 0){
                    if (_snake.canMove(_snake.getHeadDirection()) = 1){
                        do _snake.move(_snake.getHeadDirection());
                    }
                    if (_snake.canMove(_snake.getHeadDirection()) = -1){
                        do clearFood();
                        do _drawer.gameOver();
    
                        return;
                    }
                }
            }
    
            if (isCollidedWithFood()){
                do _snake.eat();
                do _drawer.incrementScore();
                do spawnFood();
            }

            if (~Settings.isDebug()){
                do _drawer.drawStatusBar();
            }
            if (Settings.isDebug()){
                do _drawer.drawDebugStatusBar();
            }

            do Sys.wait(_delayTime);

            do updateTime();
        }
        
        return;
    }

    method void spawnFood(){
        var int x, y;

        do Random.setSeed(_time);

        let x = Random.randRange(Settings.maxScreenX());
        let y = Random.randRange(Settings.maxScreenY());

        do _food.setPosition(x, y);
        do _food.draw();

        return;
    }
    
    method void clearFood(){
        do _food.clear();

        return;
    }

    method boolean isCollidedWithFood(){
        if (_snake.getHeadX() = _food.getX()){
            if (_snake.getHeadY() = _food.getY()){
                return true;
            }
        }

        return false;
    }

    method void updateTime(){
        let _time = _time + _delayTime;

        if (_time < 0){
            let _time = 0;
        }

        if (Util.mod(_time, 1000) = 0){
            do _drawer.incrementSec();
        }

        return;
    }
}